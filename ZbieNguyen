--[[
 .____                  ________ ___.    _____                           __                
 |    |    __ _______   \_____  \\_ |___/ ____\_ __  ______ ____ _____ _/  |_  ___________ 
 |    |   |  |  \__  \   /   |   \| __ \   __\  |  \/  ___// ___\\__  \\   __\/  _ \_  __ \
 |    |___|  |  // __ \_/    |    \ \_\ \  | |  |  /\___ \\  \___ / __ \|  | (  <_> )  | \/
 |_______ \____/(____  /\_______  /___  /__| |____//____  >\___  >____  /__|  \____/|__|   
         \/          \/         \/    \/                \/     \/     \/                   
          \_Welcome to LuaObfuscator.com   (Alpha 0.10.9) ~  Much Love, Ferib 

]]--

local StrToNumber = tonumber; -- xrefs: 12 34 37
local Byte = string.byte; -- xrefs: 13 33 57 62 67 102
local Char = string.char; -- xrefs: 14 37 102
local Sub = string.sub; -- xrefs: 15 32 34 98 102
local Subg = string.gsub; -- xrefs: 16 32
local Rep = string.rep; -- xrefs: 17 39
local Concat = table.concat; -- xrefs: 18 104
local Insert = table.insert; -- xrefs: 19
local LDExp = math.ldexp; -- xrefs: 20 88
local GetFEnv = getfenv or function() -- xrefs: 21 882
	return _ENV;
end;
local Setmetatable = setmetatable; -- xrefs: 24 432 572
local PCall = pcall; -- xrefs: 25
local Select = select; -- xrefs: 26 108 177
local Unpack = unpack or table.unpack; -- xrefs: 27 284 297 328 370 410 478 514 527 533 547 595 609 652 689 698 707 716 782 795
local ToNumber = tonumber; -- xrefs: 28
local function VMCall(ByteString, vmenv, ...) -- xrefs: 29 29 882 -- xrefs: 29 32 -- xrefs: 29 880
	local DIP = 1; -- xrefs: 30
	local repeatNext; -- xrefs: 31 34 38 39 40
	ByteString = Subg(Sub(ByteString, 5), "..", function(byte) -- xrefs: 32 57 62 67 98 -- xrefs: 32 33 34 37
		if (Byte(byte, 2) == 81) then
			repeatNext = StrToNumber(Sub(byte, 1, 1));
			return "";
		else
			local a = Char(StrToNumber(byte, 16)); -- xrefs: 37 39 43
			if repeatNext then
				local b = Rep(a, repeatNext); -- xrefs: 39 41
				repeatNext = nil;
				return b;
			else
				return a;
			end
		end
	end);
	local function gBit(Bit, Start, End) -- xrefs: 47 47 75 76 77 132 133 134 147 150 153 -- xrefs: 47 49 53 -- xrefs: 47 49 49 52 -- xrefs: 47 48 49
		if End then
			local Res = (Bit / (2 ^ (Start - 1))) % (2 ^ (((End - 1) - (Start - 1)) + 1)); -- xrefs: 49 50 50
			return Res - (Res % 1);
		else
			local Plc = 2 ^ (Start - 1); -- xrefs: 52 53 53 53
			return (((Bit % (Plc + Plc)) >= Plc) and 1) or 0;
		end
	end
	local function gBits8() -- xrefs: 56 56 118 121 129 131
		local a = Byte(ByteString, DIP, DIP); -- xrefs: 57 59
		DIP = DIP + 1;
		return a;
	end
	local function gBits16() -- xrefs: 61 61 135 135 137 138 145
		local a, b = Byte(ByteString, DIP, DIP + 2); -- xrefs: 62 64 -- xrefs: 62 64
		DIP = DIP + 2;
		return (b * 256) + a;
	end
	local function gBits32() -- xrefs: 66 66 72 73 93 106 115 130 140 142 144 159
		local a, b, c, d = Byte(ByteString, DIP, DIP + 3); -- xrefs: 67 69 -- xrefs: 67 69 -- xrefs: 67 69 -- xrefs: 67 69
		DIP = DIP + 4;
		return (d * 16777216) + (c * 65536) + (b * 256) + a;
	end
	local function gFloat() -- xrefs: 71 71 123
		local Left = gBits32(); -- xrefs: 72 75
		local Right = gBits32(); -- xrefs: 73 75 76 77
		local IsNormal = 1; -- xrefs: 74 83 88
		local Mantissa = (gBit(Right, 1, 20) * (2 ^ 32)) + Left; -- xrefs: 75 79 86 88
		local Exponent = gBit(Right, 21, 31); -- xrefs: 76 78 82 85 88
		local Sign = ((gBit(Right, 32) == 1) and -1) or 1; -- xrefs: 77 80 86 86 88
		if (Exponent == 0) then
			if (Mantissa == 0) then
				return Sign * 0;
			else
				Exponent = 1;
				IsNormal = 0;
			end
		elseif (Exponent == 2047) then
			return ((Mantissa == 0) and (Sign * (1 / 0))) or (Sign * NaN);
		end
		return LDExp(Sign, Exponent - 1023) * (IsNormal + (Mantissa / (2 ^ 52)));
	end
	local function gString(Len) -- xrefs: 90 90 125 -- xrefs: 90 92 93 94 98 99
		local Str; -- xrefs: 91
		if not Len then
			Len = gBits32();
			if (Len == 0) then
				return "";
			end
		end
		Str = Sub(ByteString, DIP, (DIP + Len) - 1); -- xrefs: 98 101 102
		DIP = DIP + Len;
		local FStr = {}; -- xrefs: 100 102 104
		for Idx = 1, #Str do -- xrefs: 101 102 102 102
			FStr[Idx] = Char(Byte(Sub(Str, Idx, Idx))); -- xrefs:
		end
		return Concat(FStr);
	end
	local gInt = gBits32; -- xrefs: 106
	local function _R(...) -- xrefs: 107 107 172
		return {...}, Select("#", ...);
	end
	local function Deserialize() -- xrefs: 110 160 110 880
		local Instrs = {}; -- xrefs: 111 114 156
		local Functions = {}; -- xrefs: 112 114 160
		local Lines = {}; -- xrefs: 113 114
		local Chunk = {Instrs,Functions,nil,Lines}; -- xrefs: 114 129 162
		local ConstCount = gBits32(); -- xrefs: 115 117
		local Consts = {}; -- xrefs: 116 127 148 151 154
		for Idx = 1, ConstCount do -- xrefs: 117 127
			local Type = gBits8(); -- xrefs: 118 120 122 124
			local Cons; -- xrefs: 119 121 123 125 127
			if (Type == 1) then
				Cons = gBits8() ~= 0;
			elseif (Type == 2) then
				Cons = gFloat();
			elseif (Type == 3) then
				Cons = gString();
			end
			Consts[Idx] = Cons; -- xrefs:
		end
		Chunk[3] = gBits8(); -- xrefs:
		for Idx = 1, gBits32() do -- xrefs: 130 156
			local Descriptor = gBits8(); -- xrefs: 131 132 133 134
			if (gBit(Descriptor, 1, 1) == 0) then
				local Type = gBit(Descriptor, 2, 3); -- xrefs: 133 136 139 141 143
				local Mask = gBit(Descriptor, 4, 6); -- xrefs: 134 147 150 153
				local Inst = {gBits16(),gBits16(),nil,nil}; -- xrefs: 135 137 138 140 142 144 145 148 148 151 151 154 154 156
				if (Type == 0) then
					Inst[3] = gBits16(); -- xrefs:
					Inst[4] = gBits16(); -- xrefs:
				elseif (Type == 1) then
					Inst[3] = gBits32(); -- xrefs:
				elseif (Type == 2) then
					Inst[3] = gBits32() - (2 ^ 16); -- xrefs:
				elseif (Type == 3) then
					Inst[3] = gBits32() - (2 ^ 16); -- xrefs:
					Inst[4] = gBits16(); -- xrefs:
				end
				if (gBit(Mask, 1, 1) == 1) then
					Inst[2] = Consts[Inst[2]]; -- xrefs: -- xrefs:
				end
				if (gBit(Mask, 2, 2) == 1) then
					Inst[3] = Consts[Inst[3]]; -- xrefs: -- xrefs:
				end
				if (gBit(Mask, 3, 3) == 1) then
					Inst[4] = Consts[Inst[4]]; -- xrefs: -- xrefs:
				end
				Instrs[Idx] = Inst; -- xrefs:
			end
		end
		for Idx = 1, gBits32() do -- xrefs: 159 160
			Functions[Idx - 1] = Deserialize(); -- xrefs:
		end
		return Chunk;
	end
	local function Wrap(Chunk, Upvalues, Env) -- xrefs: 164 449 589 164 880 -- xrefs: 164 165 166 167 -- xrefs: 164 445 585 792 859 -- xrefs: 164 276 290 320 365 449 589
		local Instr = Chunk[1]; -- xrefs: 165 169
		local Proto = Chunk[2]; -- xrefs: 166 170
		local Params = Chunk[3]; -- xrefs: 167 171
		return function(...)
			local Instr = Instr; -- xrefs: 169 191 441 581
			local Proto = Proto; -- xrefs: 170 429 569
			local Params = Params; -- xrefs: 171 181 182 187
			local _R = _R; -- xrefs: 172 265 537 609 652 707 716
			local VIP = 1; -- xrefs: 173 191 211 211 213 220 220 222 225 225 227 233 233 241 245 251 251 253 256 256 258 299 299 301 305 305 307 315 322 336 336 338 363 363 383 383 385 395 395 397 404 404 406 440 440 441 460 464 491 491 493 555 555 557 557 580 580 581 619 619 621 634 634 636 663 663 665 668 668 670 670 683 685 685 701 701 703 727 727 729 737 742 761 763 763 770 770 772 806 811 821 821 823 828 828 830 837 837 839 861 861 863 876 876
			local Top = -1; -- xrefs: 174 266 268 284 370 410 527 533 538 540 547 609 610 612 653 655 707 708 710 717 719 782 795
			local Vararg = {}; -- xrefs: 175 182
			local Args = {...}; -- xrefs: 176 182 184
			local PCount = Select("#", ...) - 1; -- xrefs: 177 180 187
			local Lupvals = {}; -- xrefs: 178 447 447 587 587
			local Stk = {}; -- xrefs: 179 184 199 202 202 202 216 216 224 232 236 237 238 240 242 244 246 250 255 262 265 265 270 274 274 276 284 287 290 292 292 297 297 297 298 304 310 310 317 320 328 328 331 331 334 334 334 335 345 347 347 347 351 353 355 358 358 362 365 370 374 381 381 381 382 382 388 390 390 390 394 400 400 400 403 403 410 410 416 416 418 418 422 425 425 443 449 451 451 455 456 457 459 461 463 465 468 478 478 482 483 484 486 486 490 490 497 497 501 506 508 510 514 514 522 522 524 524 527 527 527 533 533 537 537 542 547 547 549 549 554 554 560 563 565 565 583 589 591 591 595 595 598 599 600 606 606 609 609 614 618 618 624 624 628 628 630 630 630 633 639 639 644 644 644 646 649 649 652 652 657 662 667 667 676 676 676 678 682 689 689 689 698 700 707 707 712 716 716 721 726 733 734 736 739 741 744 749 749 754 754 754 756 760 769 775 775 778 778 782 782 787 787 787 789 789 792 795 795 795 802 803 805 808 810 813 816 816 816 819 819 833 833 836 842 842 848 848 850 850 850 853 853 853 855 855 859 860 866 866 869 869 873
			for Idx = 0, PCount do -- xrefs: 180 181 182 182 184 184
				if (Idx >= Params) then
					Vararg[Idx - Params] = Args[Idx + 1]; -- xrefs: -- xrefs:
				else
					Stk[Idx] = Args[Idx + 1]; -- xrefs: -- xrefs:
				end
			end
			local Varargsz = (PCount - Params) + 1; -- xrefs: 187
			local Inst; -- xrefs: 188 191 192 199 199 199 201 210 210 213 216 216 216 219 219 222 224 227 232 232 235 241 245 250 253 255 255 258 262 262 262 264 274 274 274 276 276 282 287 290 290 292 292 296 297 298 298 301 304 304 307 310 310 315 317 317 320 320 322 326 328 331 331 331 334 334 334 335 335 338 345 347 347 347 350 352 355 357 362 362 365 365 368 374 380 382 382 385 388 390 390 390 394 394 397 400 400 400 403 403 406 409 416 416 416 418 418 418 422 425 425 425 429 439 449 451 451 451 454 460 464 468 468 477 478 481 482 484 486 486 490 490 493 496 499 505 507 510 512 514 522 522 524 524 524 526 531 536 546 549 549 549 554 554 557 560 563 563 565 565 565 569 579 589 591 591 591 594 595 597 598 600 606 606 606 608 618 618 621 624 624 624 628 628 628 630 630 630 633 633 636 639 639 639 644 644 644 646 646 649 649 649 651 652 662 665 667 667 670 673 674 683 688 689 696 698 700 700 703 706 715 716 726 729 732 737 742 748 751 752 761 769 769 772 775 775 778 778 778 780 787 787 787 789 789 789 792 792 794 801 806 811 816 816 816 819 819 819 820 820 823 827 827 830 833 833 833 836 836 839 842 842 847 850 850 850 853 853 853 855 855 855 859 859 860 860 863 866 866 866 868 871
			local Enum; -- xrefs
			while true do
				Inst = Instr[VIP]; -- xrefs:
				Enum = Inst[1]; -- xrefs:
				if (Enum <= 62) then
					if (Enum <= 30) then
						if (Enum <= 14) then
							if (Enum <= 6) then
								if (Enum <= 2) then
									if (Enum <= 0) then
										Stk[Inst[2]][Inst[3]] = Inst[4]; -- xrefs: -- xrefs:
									elseif (Enum == 1) then
										local A = Inst[2]; -- xrefs: 201 202 202 202
										Stk[A] = Stk[A](Stk[A + 1]); -- xrefs:
									else
										do
											return;
										end
									end
								elseif (Enum <= 4) then
									if (Enum == 3) then
										if (Inst[2] <= Inst[4]) then
											VIP = VIP + 1;
										else
											VIP = Inst[3]; -- xrefs:
										end
									else
										Stk[Inst[2]] = Stk[Inst[3]] / Inst[4]; -- xrefs:
									end
								elseif (Enum > 5) then
									if (Inst[2] < Inst[4]) then
										VIP = VIP + 1;
									else
										VIP = Inst[3]; -- xrefs:
									end
								elseif not Stk[Inst[2]] then
									VIP = VIP + 1;
								else
									VIP = Inst[3]; -- xrefs:
								end
							elseif (Enum <= 10) then
								if (Enum <= 8) then
									if (Enum == 7) then
										Stk[Inst[2]] = Inst[3] ~= 0; -- xrefs:
										VIP = VIP + 1;
									else
										local A = Inst[2]; -- xrefs: 235 236 237 238 240 242 244 246
										local Step = Stk[A + 2]; -- xrefs: 236 237 239
										local Index = Stk[A] + Step; -- xrefs: 237 238 240 242 244 246
										Stk[A] = Index; -- xrefs:
										if (Step > 0) then
											if (Index <= Stk[A + 1]) then
												VIP = Inst[3]; -- xrefs:
												Stk[A + 3] = Index; -- xrefs:
											end
										elseif (Index >= Stk[A + 1]) then
											VIP = Inst[3]; -- xrefs:
											Stk[A + 3] = Index; -- xrefs:
										end
									end
								elseif (Enum == 9) then
									if not Stk[Inst[2]] then
										VIP = VIP + 1;
									else
										VIP = Inst[3]; -- xrefs:
									end
								elseif (Stk[Inst[2]] ~= Inst[4]) then
									VIP = VIP + 1;
								else
									VIP = Inst[3]; -- xrefs:
								end
							elseif (Enum <= 12) then
								if (Enum > 11) then
									Stk[Inst[2]][Inst[3]] = Inst[4]; -- xrefs: -- xrefs:
								else
									local A = Inst[2]; -- xrefs: 264 265 265 266 268
									local Results, Limit = _R(Stk[A](Stk[A + 1])); -- xrefs: 265 270 -- xrefs: 265 266
									Top = (Limit + A) - 1;
									local Edx = 0; -- xrefs: 267 269 269 270
									for Idx = A, Top do -- xrefs: 268 270
										Edx = Edx + 1;
										Stk[Idx] = Results[Edx]; -- xrefs: -- xrefs:
									end
								end
							elseif (Enum == 13) then
								Stk[Inst[2]] = Inst[3] + Stk[Inst[4]]; -- xrefs:
							else
								Stk[Inst[2]] = Env[Inst[3]]; -- xrefs: -- xrefs:
							end
						elseif (Enum <= 22) then
							if (Enum <= 18) then
								if (Enum <= 16) then
									if (Enum == 15) then
										local A = Inst[2]; -- xrefs: 282 284
										do
											return Unpack(Stk, A, Top);
										end
									else
										Stk[Inst[2]] = {}; -- xrefs:
									end
								elseif (Enum == 17) then
									Env[Inst[3]] = Stk[Inst[2]]; -- xrefs: -- xrefs:
								else
									Stk[Inst[2]] = #Stk[Inst[3]]; -- xrefs:
								end
							elseif (Enum <= 20) then
								if (Enum > 19) then
									local A = Inst[2]; -- xrefs: 296 297 297 297
									Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3])); -- xrefs:
								elseif (Inst[2] <= Stk[Inst[4]]) then
									VIP = VIP + 1;
								else
									VIP = Inst[3]; -- xrefs:
								end
							elseif (Enum > 21) then
								if (Stk[Inst[2]] == Inst[4]) then
									VIP = VIP + 1;
								else
									VIP = Inst[3]; -- xrefs:
								end
							else
								Stk[Inst[2]] = -Stk[Inst[3]]; -- xrefs:
							end
						elseif (Enum <= 26) then
							if (Enum <= 24) then
								if (Enum > 23) then
									VIP = Inst[3]; -- xrefs:
								else
									Stk[Inst[2]] = Inst[3]; -- xrefs: -- xrefs:
								end
							elseif (Enum > 25) then
								Stk[Inst[2]] = Env[Inst[3]]; -- xrefs: -- xrefs:
							else
								VIP = Inst[3]; -- xrefs:
							end
						elseif (Enum <= 28) then
							if (Enum == 27) then
								local A = Inst[2]; -- xrefs: 326 328 328
								do
									return Stk[A](Unpack(Stk, A + 1, Inst[3]));
								end
							else
								Stk[Inst[2]] = Inst[3] - Stk[Inst[4]]; -- xrefs:
							end
						elseif (Enum > 29) then
							Stk[Inst[2]] = Stk[Inst[3]] % Stk[Inst[4]]; -- xrefs:
						elseif (Stk[Inst[2]] < Inst[4]) then
							VIP = VIP + 1;
						else
							VIP = Inst[3]; -- xrefs:
						end
					elseif (Enum <= 46) then
						if (Enum <= 38) then
							if (Enum <= 34) then
								if (Enum <= 32) then
									if (Enum > 31) then
										Stk[Inst[2]] = {}; -- xrefs:
									else
										Stk[Inst[2]] = Stk[Inst[3]] - Stk[Inst[4]]; -- xrefs:
									end
								elseif (Enum == 33) then
									local B = Inst[3]; -- xrefs: 350 351 352
									local K = Stk[B]; -- xrefs: 351 353 353 355
									for Idx = B + 1, Inst[4] do -- xrefs: 352 353
										K = K .. Stk[Idx];
									end
									Stk[Inst[2]] = K; -- xrefs:
								else
									local A = Inst[2]; -- xrefs: 357 358 358
									Stk[A](Stk[A + 1]);
								end
							elseif (Enum <= 36) then
								if (Enum == 35) then
									Stk[Inst[2]] = Inst[3] ~= 0; -- xrefs:
									VIP = VIP + 1;
								else
									Env[Inst[3]] = Stk[Inst[2]]; -- xrefs: -- xrefs:
								end
							elseif (Enum > 37) then
								local A = Inst[2]; -- xrefs: 368 370
								do
									return Unpack(Stk, A, Top);
								end
							else
								do
									return Stk[Inst[2]];
								end
							end
						elseif (Enum <= 42) then
							if (Enum <= 40) then
								if (Enum > 39) then
									local A = Inst[2]; -- xrefs: 380 381 381 381
									Stk[A] = Stk[A](Stk[A + 1]); -- xrefs:
								elseif (Stk[Inst[2]] == Stk[Inst[4]]) then
									VIP = VIP + 1;
								else
									VIP = Inst[3]; -- xrefs:
								end
							elseif (Enum == 41) then
								Stk[Inst[2]]();
							else
								Stk[Inst[2]] = Stk[Inst[3]] % Stk[Inst[4]]; -- xrefs:
							end
						elseif (Enum <= 44) then
							if (Enum == 43) then
								if (Inst[2] < Stk[Inst[4]]) then
									VIP = VIP + 1;
								else
									VIP = Inst[3]; -- xrefs:
								end
							else
								Stk[Inst[2]] = Stk[Inst[3]] + Stk[Inst[4]]; -- xrefs:
							end
						elseif (Enum > 45) then
							if (Stk[Inst[2]] == Stk[Inst[4]]) then
								VIP = VIP + 1;
							else
								VIP = Inst[3]; -- xrefs:
							end
						else
							local A = Inst[2]; -- xrefs: 409 410 410
							Stk[A](Unpack(Stk, A + 1, Top));
						end
					elseif (Enum <= 54) then
						if (Enum <= 50) then
							if (Enum <= 48) then
								if (Enum > 47) then
									Stk[Inst[2]] = Stk[Inst[3]] - Inst[4]; -- xrefs:
								else
									Stk[Inst[2]] = Stk[Inst[3]] - Inst[4]; -- xrefs:
								end
							elseif (Enum == 49) then
								do
									return Stk[Inst[2]];
								end
							else
								Stk[Inst[2]][Inst[3]] = Stk[Inst[4]]; -- xrefs: -- xrefs:
							end
						elseif (Enum <= 52) then
							if (Enum > 51) then
								local NewProto = Proto[Inst[3]]; -- xrefs: 429 449
								local NewUvals; -- xrefs: 430
								local Indexes = {}; -- xrefs: 431 433 436 443 445 447
								NewUvals = Setmetatable({}, {__index=function(_, Key) -- xrefs: 432 449 -- xrefs: 432 -- xrefs: 432 433
									local Val = Indexes[Key]; -- xrefs: 433 434 434
									return Val[1][Val[2]];
								end,__newindex=function(_, Key, Value) -- xrefs: 435 -- xrefs: 435 436 -- xrefs: 435 437
									local Val = Indexes[Key]; -- xrefs: 436 437 437
									Val[1][Val[2]] = Value; -- xrefs:
								end});
								for Idx = 1, Inst[4] do -- xrefs: 439 443 445
									VIP = VIP + 1;
									local Mvm = Instr[VIP]; -- xrefs: 441 442 443 445
									if (Mvm[1] == 116) then
										Indexes[Idx - 1] = {Stk,Mvm[3]}; -- xrefs:
									else
										Indexes[Idx - 1] = {Upvalues,Mvm[3]}; -- xrefs:
									end
									Lupvals[#Lupvals + 1] = Indexes; -- xrefs:
								end
								Stk[Inst[2]] = Wrap(NewProto, NewUvals, Env); -- xrefs:
							else
								Stk[Inst[2]] = Stk[Inst[3]] / Inst[4]; -- xrefs:
							end
						elseif (Enum == 53) then
							local A = Inst[2]; -- xrefs: 454 455 456 457 459 461 463 465
							local Step = Stk[A + 2]; -- xrefs: 455 456 458
							local Index = Stk[A] + Step; -- xrefs: 456 457 459 461 463 465
							Stk[A] = Index; -- xrefs:
							if (Step > 0) then
								if (Index <= Stk[A + 1]) then
									VIP = Inst[3]; -- xrefs:
									Stk[A + 3] = Index; -- xrefs:
								end
							elseif (Index >= Stk[A + 1]) then
								VIP = Inst[3]; -- xrefs:
								Stk[A + 3] = Index; -- xrefs:
							end
						else
							Stk[Inst[2]] = Inst[3] ~= 0; -- xrefs:
						end
					elseif (Enum <= 58) then
						if (Enum <= 56) then
							if (Enum == 55) then
								do
									return;
								end
							else
								local A = Inst[2]; -- xrefs: 477 478 478
								Stk[A](Unpack(Stk, A + 1, Inst[3]));
							end
						elseif (Enum > 57) then
							local A = Inst[2]; -- xrefs: 481 483 484
							local B = Stk[Inst[3]]; -- xrefs: 482 483 484
							Stk[A + 1] = B; -- xrefs:
							Stk[A] = B[Inst[4]]; -- xrefs: -- xrefs:
						else
							Stk[Inst[2]] = Stk[Inst[3]]; -- xrefs: -- xrefs:
						end
					elseif (Enum <= 60) then
						if (Enum > 59) then
							if (Stk[Inst[2]] <= Stk[Inst[4]]) then
								VIP = VIP + 1;
							else
								VIP = Inst[3]; -- xrefs:
							end
						else
							local A = Inst[2]; -- xrefs: 496 497 497 499
							local Results = {Stk[A](Stk[A + 1])}; -- xrefs: 497 501
							local Edx = 0; -- xrefs: 498 500 500 501
							for Idx = A, Inst[4] do -- xrefs: 499 501
								Edx = Edx + 1;
								Stk[Idx] = Results[Edx]; -- xrefs: -- xrefs:
							end
						end
					elseif (Enum == 61) then
						local B = Inst[3]; -- xrefs: 505 506 507
						local K = Stk[B]; -- xrefs: 506 508 508 510
						for Idx = B + 1, Inst[4] do -- xrefs: 507 508
							K = K .. Stk[Idx];
						end
						Stk[Inst[2]] = K; -- xrefs:
					else
						local A = Inst[2]; -- xrefs: 512 514 514
						do
							return Stk[A](Unpack(Stk, A + 1, Inst[3]));
						end
					end
				elseif (Enum <= 93) then
					if (Enum <= 77) then
						if (Enum <= 69) then
							if (Enum <= 65) then
								if (Enum <= 63) then
									Stk[Inst[2]] = #Stk[Inst[3]]; -- xrefs:
								elseif (Enum > 64) then
									Stk[Inst[2]] = Inst[3] ^ Stk[Inst[4]]; -- xrefs:
								else
									local A = Inst[2]; -- xrefs: 526 527 527 527
									Stk[A] = Stk[A](Unpack(Stk, A + 1, Top)); -- xrefs:
								end
							elseif (Enum <= 67) then
								if (Enum > 66) then
									local A = Inst[2]; -- xrefs: 531 533 533
									do
										return Stk[A](Unpack(Stk, A + 1, Top));
									end
								else
									local A = Inst[2]; -- xrefs: 536 537 537 538 540
									local Results, Limit = _R(Stk[A](Stk[A + 1])); -- xrefs: 537 542 -- xrefs: 537 538
									Top = (Limit + A) - 1;
									local Edx = 0; -- xrefs: 539 541 541 542
									for Idx = A, Top do -- xrefs: 540 542
										Edx = Edx + 1;
										Stk[Idx] = Results[Edx]; -- xrefs: -- xrefs:
									end
								end
							elseif (Enum == 68) then
								local A = Inst[2]; -- xrefs: 546 547 547
								Stk[A](Unpack(Stk, A + 1, Top));
							else
								Stk[Inst[2]] = Inst[3] ^ Stk[Inst[4]]; -- xrefs:
							end
						elseif (Enum <= 73) then
							if (Enum <= 71) then
								if (Enum > 70) then
									if (Stk[Inst[2]] > Stk[Inst[4]]) then
										VIP = VIP + 1;
									else
										VIP = VIP + Inst[3];
									end
								else
									Stk[Inst[2]]();
								end
							elseif (Enum > 72) then
								Stk[Inst[2]] = Inst[3]; -- xrefs: -- xrefs:
							else
								Stk[Inst[2]] = Stk[Inst[3]][Inst[4]]; -- xrefs: -- xrefs:
							end
						elseif (Enum <= 75) then
							if (Enum > 74) then
								local NewProto = Proto[Inst[3]]; -- xrefs: 569 589
								local NewUvals; -- xrefs: 570
								local Indexes = {}; -- xrefs: 571 573 576 583 585 587
								NewUvals = Setmetatable({}, {__index=function(_, Key) -- xrefs: 572 589 -- xrefs: 572 -- xrefs: 572 573
									local Val = Indexes[Key]; -- xrefs: 573 574 574
									return Val[1][Val[2]];
								end,__newindex=function(_, Key, Value) -- xrefs: 575 -- xrefs: 575 576 -- xrefs: 575 577
									local Val = Indexes[Key]; -- xrefs: 576 577 577
									Val[1][Val[2]] = Value; -- xrefs:
								end});
								for Idx = 1, Inst[4] do -- xrefs: 579 583 585
									VIP = VIP + 1;
									local Mvm = Instr[VIP]; -- xrefs: 581 582 583 585
									if (Mvm[1] == 116) then
										Indexes[Idx - 1] = {Stk,Mvm[3]}; -- xrefs:
									else
										Indexes[Idx - 1] = {Upvalues,Mvm[3]}; -- xrefs:
									end
									Lupvals[#Lupvals + 1] = Indexes; -- xrefs:
								end
								Stk[Inst[2]] = Wrap(NewProto, NewUvals, Env); -- xrefs:
							else
								Stk[Inst[2]][Stk[Inst[3]]] = Inst[4]; -- xrefs: -- xrefs:
							end
						elseif (Enum == 76) then
							local A = Inst[2]; -- xrefs: 594 595 595
							Stk[A](Unpack(Stk, A + 1, Inst[3]));
						else
							local A = Inst[2]; -- xrefs: 597 599 600
							local B = Stk[Inst[3]]; -- xrefs: 598 599 600
							Stk[A + 1] = B; -- xrefs:
							Stk[A] = B[Inst[4]]; -- xrefs: -- xrefs:
						end
					elseif (Enum <= 85) then
						if (Enum <= 81) then
							if (Enum <= 79) then
								if (Enum == 78) then
									Stk[Inst[2]] = Stk[Inst[3]] % Inst[4]; -- xrefs:
								else
									local A = Inst[2]; -- xrefs: 608 609 609 610 612
									local Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Top))); -- xrefs: 609 614 -- xrefs: 609 610
									Top = (Limit + A) - 1;
									local Edx = 0; -- xrefs: 611 613 613 614
									for Idx = A, Top do -- xrefs: 612 614
										Edx = Edx + 1;
										Stk[Idx] = Results[Edx]; -- xrefs: -- xrefs:
									end
								end
							elseif (Enum > 80) then
								if (Stk[Inst[2]] <= Stk[Inst[4]]) then
									VIP = VIP + 1;
								else
									VIP = Inst[3]; -- xrefs:
								end
							else
								Stk[Inst[2]][Stk[Inst[3]]] = Inst[4]; -- xrefs: -- xrefs:
							end
						elseif (Enum <= 83) then
							if (Enum == 82) then
								Stk[Inst[2]] = Inst[3] + Stk[Inst[4]]; -- xrefs:
							else
								Stk[Inst[2]] = Stk[Inst[3]][Stk[Inst[4]]]; -- xrefs: -- xrefs:
							end
						elseif (Enum == 84) then
							if (Stk[Inst[2]] ~= Inst[4]) then
								VIP = VIP + 1;
							else
								VIP = Inst[3]; -- xrefs:
							end
						else
							Stk[Inst[2]] = Inst[3] * Stk[Inst[4]]; -- xrefs:
						end
					elseif (Enum <= 89) then
						if (Enum <= 87) then
							if (Enum > 86) then
								Stk[Inst[2]] = Stk[Inst[3]] - Stk[Inst[4]]; -- xrefs:
							else
								Stk[Inst[2]] = Inst[3] ~= 0; -- xrefs:
							end
						elseif (Enum == 88) then
							Stk[Inst[2]] = Stk[Inst[3]] + Inst[4]; -- xrefs:
						else
							local A = Inst[2]; -- xrefs: 651 652 652 653 655
							local Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3]))); -- xrefs: 652 657 -- xrefs: 652 653
							Top = (Limit + A) - 1;
							local Edx = 0; -- xrefs: 654 656 656 657
							for Idx = A, Top do -- xrefs: 655 657
								Edx = Edx + 1;
								Stk[Idx] = Results[Edx]; -- xrefs: -- xrefs:
							end
						end
					elseif (Enum <= 91) then
						if (Enum == 90) then
							if Stk[Inst[2]] then
								VIP = VIP + 1;
							else
								VIP = Inst[3]; -- xrefs:
							end
						elseif (Stk[Inst[2]] > Stk[Inst[4]]) then
							VIP = VIP + 1;
						else
							VIP = VIP + Inst[3];
						end
					elseif (Enum == 92) then
						local A = Inst[2]; -- xrefs: 673 675 676 676
						local C = Inst[4]; -- xrefs: 674 677
						local CB = A + 2; -- xrefs: 675 676 678 682
						local Result = {Stk[A](Stk[A + 1], Stk[CB])}; -- xrefs: 676 678 680
						for Idx = 1, C do -- xrefs: 677 678 678
							Stk[CB + Idx] = Result[Idx]; -- xrefs: -- xrefs:
						end
						local R = Result[1]; -- xrefs: 680 681 682
						if R then
							Stk[CB] = R; -- xrefs:
							VIP = Inst[3]; -- xrefs:
						else
							VIP = VIP + 1;
						end
					else
						local A = Inst[2]; -- xrefs: 688 689 689 689
						Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3])); -- xrefs:
					end
				elseif (Enum <= 109) then
					if (Enum <= 101) then
						if (Enum <= 97) then
							if (Enum <= 95) then
								if (Enum == 94) then
									local A = Inst[2]; -- xrefs: 696 698 698
									do
										return Unpack(Stk, A, A + Inst[3]);
									end
								elseif (Stk[Inst[2]] == Inst[4]) then
									VIP = VIP + 1;
								else
									VIP = Inst[3]; -- xrefs:
								end
							elseif (Enum == 96) then
								local A = Inst[2]; -- xrefs: 706 707 707 708 710
								local Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Top))); -- xrefs: 707 712 -- xrefs: 707 708
								Top = (Limit + A) - 1;
								local Edx = 0; -- xrefs: 709 711 711 712
								for Idx = A, Top do -- xrefs: 710 712
									Edx = Edx + 1;
									Stk[Idx] = Results[Edx]; -- xrefs: -- xrefs:
								end
							else
								local A = Inst[2]; -- xrefs: 715 716 716 717 719
								local Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3]))); -- xrefs: 716 721 -- xrefs: 716 717
								Top = (Limit + A) - 1;
								local Edx = 0; -- xrefs: 718 720 720 721
								for Idx = A, Top do -- xrefs: 719 721
									Edx = Edx + 1;
									Stk[Idx] = Results[Edx]; -- xrefs: -- xrefs:
								end
							end
						elseif (Enum <= 99) then
							if (Enum > 98) then
								if Stk[Inst[2]] then
									VIP = VIP + 1;
								else
									VIP = Inst[3]; -- xrefs:
								end
							else
								local A = Inst[2]; -- xrefs: 732 733 734 736 739 741 744
								local Index = Stk[A]; -- xrefs: 733 736 739 741 744
								local Step = Stk[A + 2]; -- xrefs: 734 735
								if (Step > 0) then
									if (Index > Stk[A + 1]) then
										VIP = Inst[3]; -- xrefs:
									else
										Stk[A + 3] = Index; -- xrefs:
									end
								elseif (Index < Stk[A + 1]) then
									VIP = Inst[3]; -- xrefs:
								else
									Stk[A + 3] = Index; -- xrefs:
								end
							end
						elseif (Enum > 100) then
							local A = Inst[2]; -- xrefs: 748 749 749
							Stk[A] = Stk[A](); -- xrefs:
						else
							local A = Inst[2]; -- xrefs: 751 753 754 754
							local C = Inst[4]; -- xrefs: 752 755
							local CB = A + 2; -- xrefs: 753 754 756 760
							local Result = {Stk[A](Stk[A + 1], Stk[CB])}; -- xrefs: 754 756 758
							for Idx = 1, C do -- xrefs: 755 756 756
								Stk[CB + Idx] = Result[Idx]; -- xrefs: -- xrefs:
							end
							local R = Result[1]; -- xrefs: 758 759 760
							if R then
								Stk[CB] = R; -- xrefs:
								VIP = Inst[3]; -- xrefs:
							else
								VIP = VIP + 1;
							end
						end
					elseif (Enum <= 105) then
						if (Enum <= 103) then
							if (Enum == 102) then
								if (Stk[Inst[2]] < Inst[4]) then
									VIP = VIP + 1;
								else
									VIP = Inst[3]; -- xrefs:
								end
							else
								Stk[Inst[2]] = -Stk[Inst[3]]; -- xrefs:
							end
						elseif (Enum == 104) then
							Stk[Inst[2]] = Inst[3] * Stk[Inst[4]]; -- xrefs:
						else
							local A = Inst[2]; -- xrefs: 780 782 782
							do
								return Stk[A](Unpack(Stk, A + 1, Top));
							end
						end
					elseif (Enum <= 107) then
						if (Enum > 106) then
							Stk[Inst[2]] = Stk[Inst[3]] + Stk[Inst[4]]; -- xrefs:
						else
							Stk[Inst[2]] = Stk[Inst[3]] + Inst[4]; -- xrefs:
						end
					elseif (Enum == 108) then
						Stk[Inst[2]] = Upvalues[Inst[3]]; -- xrefs: -- xrefs:
					else
						local A = Inst[2]; -- xrefs: 794 795 795 795
						Stk[A] = Stk[A](Unpack(Stk, A + 1, Top)); -- xrefs:
					end
				elseif (Enum <= 117) then
					if (Enum <= 113) then
						if (Enum <= 111) then
							if (Enum > 110) then
								local A = Inst[2]; -- xrefs: 801 802 803 805 808 810 813
								local Index = Stk[A]; -- xrefs: 802 805 808 810 813
								local Step = Stk[A + 2]; -- xrefs: 803 804
								if (Step > 0) then
									if (Index > Stk[A + 1]) then
										VIP = Inst[3]; -- xrefs:
									else
										Stk[A + 3] = Index; -- xrefs:
									end
								elseif (Index < Stk[A + 1]) then
									VIP = Inst[3]; -- xrefs:
								else
									Stk[A + 3] = Index; -- xrefs:
								end
							else
								Stk[Inst[2]] = Stk[Inst[3]][Stk[Inst[4]]]; -- xrefs: -- xrefs:
							end
						elseif (Enum > 112) then
							Stk[Inst[2]] = Stk[Inst[3]] % Inst[4]; -- xrefs:
						elseif (Inst[2] < Inst[4]) then
							VIP = VIP + 1;
						else
							VIP = Inst[3]; -- xrefs:
						end
					elseif (Enum <= 115) then
						if (Enum == 114) then
							if (Inst[2] <= Inst[4]) then
								VIP = VIP + 1;
							else
								VIP = Inst[3]; -- xrefs:
							end
						else
							Stk[Inst[2]] = Stk[Inst[3]][Inst[4]]; -- xrefs: -- xrefs:
						end
					elseif (Enum > 116) then
						if (Inst[2] < Stk[Inst[4]]) then
							VIP = VIP + 1;
						else
							VIP = Inst[3]; -- xrefs:
						end
					else
						Stk[Inst[2]] = Stk[Inst[3]]; -- xrefs: -- xrefs:
					end
				elseif (Enum <= 121) then
					if (Enum <= 119) then
						if (Enum == 118) then
							local A = Inst[2]; -- xrefs: 847 848 848
							Stk[A] = Stk[A](); -- xrefs:
						else
							Stk[Inst[2]] = Stk[Inst[3]] * Stk[Inst[4]]; -- xrefs:
						end
					elseif (Enum > 120) then
						Stk[Inst[2]] = Stk[Inst[3]] * Stk[Inst[4]]; -- xrefs:
					else
						Stk[Inst[2]][Inst[3]] = Stk[Inst[4]]; -- xrefs: -- xrefs:
					end
				elseif (Enum <= 123) then
					if (Enum == 122) then
						Stk[Inst[2]] = Upvalues[Inst[3]]; -- xrefs: -- xrefs:
					elseif (Inst[2] <= Stk[Inst[4]]) then
						VIP = VIP + 1;
					else
						VIP = Inst[3]; -- xrefs:
					end
				elseif (Enum > 124) then
					Stk[Inst[2]] = Inst[3] - Stk[Inst[4]]; -- xrefs:
				else
					local A = Inst[2]; -- xrefs: 868 869 869 871
					local Results = {Stk[A](Stk[A + 1])}; -- xrefs: 869 873
					local Edx = 0; -- xrefs: 870 872 872 873
					for Idx = A, Inst[4] do -- xrefs: 871 873
						Edx = Edx + 1;
						Stk[Idx] = Results[Edx]; -- xrefs: -- xrefs:
					end
				end
				VIP = VIP + 1;
			end
		end;
	end
	return Wrap(Deserialize(), {}, vmenv)(...);
end
return VMCalletFEnv(), ...);
